use anyhow::anyhow;

pub fn cobs_decode_frame(inp: &[u8]) -> anyhow::Result<Vec<u8>> {
    if inp.is_empty() || (inp.len() == 1 && inp[0] == 0) {
        return Err(anyhow!("Empty COBS frame."));
    }
    if inp[0] == 0 {
        return Err(anyhow!("Invalid COBS frame: First byte zero!"));
    }

    let mut result = vec![];

    let mut code_cnt = inp[0] as usize;
    let mut code_initial = inp[0] as usize;

    for byte in inp.iter().skip(1) {
        let byte = *byte;

        code_cnt -= 1;

        if byte == 0 {
            if code_cnt != 0 {
                return Err(anyhow!("Invalid COBS frame: Pointer past end of block! Are bytes missing?"));
            } else {
                break;
            }
        }

        if code_cnt == 0 {
            if code_initial != 0xFF {
                result.push(0);
            }

            code_cnt = byte as usize;
            code_initial = byte as usize;
        } else {
            result.push(byte);
        }
    }

    Ok(result)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_cobs_empty() {
        assert_eq!(cobs_decode_frame(&[0x1, 0x0]).unwrap(), vec![]);
    }

    #[test]
    fn test_cobs_nonzero_len_1() {
        assert_eq!(cobs_decode_frame(&[0x02, 0x01, 0x00]).unwrap(), vec![0x01]);
    }

    #[test]
    fn test_cobs_zero_len_1() {
        assert_eq!(cobs_decode_frame(&[0x01, 0x01, 0x00]).unwrap(), vec![0x00]);
    }

    #[test]
    fn test_cobs_short_with_zeros() {
        assert_eq!(cobs_decode_frame(&[0x03, 0x01, 0x02, 0x02, 0x03, 0x00]).unwrap(), vec![0x01, 0x02, 0x00, 0x03]);
    }

    #[test]
    fn test_cobs_short_zeroes() {
        assert_eq!(cobs_decode_frame(&[0x01, 0x01, 0x01, 0x01, 0x01, 0x00]).unwrap(), vec![0x00, 0x00, 0x00, 0x00]);
    }

    #[test]
    fn test_cobs_restarts() {
        assert_eq!(
            cobs_decode_frame(&[0x03, 0x01, 0x01, 0x4, 0x02, 0x02, 0x03, 0x01, 0x00]).unwrap(),
            vec![0x01, 0x01, 0x00, 0x02, 0x02, 0x03, 0x00]
        );
    }

    #[test]
    fn test_cobs_longest_nonbroken_block() {
        let output = Vec::from(&[0x88_u8; 254]);
        let mut input = Vec::from(&[0x88_u8; 256]);
        input[0] = 0xff;
        input[255] = 0;
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_nonzero_len_255() {
        let output = Vec::from(&[0x88_u8; 255]);
        let mut input = Vec::from(&[0x88_u8; 258]);
        input[0] = 0xff;
        input[255] = 2;
        input[257] = 0;
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_zero_at_end_len_255() {
        let mut output = Vec::from(&[0x88_u8; 255]);
        output[254] = 0;
        let mut input = Vec::from(&[0x88_u8; 258]);
        input[0] = 0xff;
        input[255] = 1;
        input[256] = 1;
        input[257] = 0;
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_zero_at_start_len_255() {
        let mut output = Vec::from(&[0x88_u8; 255]);
        output[0] = 0;
        let mut input = Vec::from(&[0x88_u8; 257]);
        input[0] = 0x01;
        input[1] = 0xFF;
        input[256] = 0;
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_255_len_nonzero_block_in_middle() {
        let mut output = Vec::from(&[0xbb_u8; 259]);
        output[0] = 1;
        output[1] = 0;
        output[1] = 0;
        output[257] = 0;
        output[258] = 1;
        let mut input = Vec::from(&[0xbb_u8; 262]);
        input[0] = 2;
        input[1] = 1;
        input[2] = 0xFF;
        input[257] = 2;
        input[259] = 2;
        input[260] = 1;
        input[261] = 0;
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_254_len_nonzero_block_in_middle() {
        let mut output: Vec<u8> = vec![0x01, 0x00];
        output.extend([0xbb; 254].iter());
        output.push(0);
        output.push(1);

        let mut input: Vec<u8> = vec![0x02, 0x01, 0xff];
        input.extend([0xbb; 254].iter());
        input.push(0x01);
        input.push(0x02);
        input.push(0x01);
        input.push(0x00);
        assert_eq!(cobs_decode_frame(&input).unwrap(), output);
    }

    #[test]
    fn test_cobs_random1() {
        let output: &[u8] = &[
            0x60, 0x0c, 0x73, 0x24, 0x3e, 0xb2, 0x51, 0x17, 0x9a, 0x05, 0x95, 0x3c, 0x1d, 0x47, 0x6c, 0x4e, 0xeb, 0xda,
            0x02, 0x3d, 0x46, 0x0f, 0xd8, 0xe7, 0x15, 0x6a, 0xcd, 0xf4, 0x4b, 0x91, 0x1b, 0x59, 0xb5, 0x63, 0xd6, 0x5e,
            0x1d, 0x06, 0x4d, 0x78, 0xa3, 0xb8, 0x17, 0x57, 0x41, 0xc5, 0xbd, 0xf8, 0x36, 0xc9, 0x66, 0xb8, 0x8f, 0x00,
            0xc7, 0xa9, 0x2d, 0xa7, 0x61, 0x2d, 0x3d, 0xa2, 0xa1, 0x84,
        ];
        let input: &[u8] = &[
            0x36, 0x60, 0x0c, 0x73, 0x24, 0x3e, 0xb2, 0x51, 0x17, 0x9a, 0x05, 0x95, 0x3c, 0x1d, 0x47, 0x6c, 0x4e, 0xeb,
            0xda, 0x02, 0x3d, 0x46, 0x0f, 0xd8, 0xe7, 0x15, 0x6a, 0xcd, 0xf4, 0x4b, 0x91, 0x1b, 0x59, 0xb5, 0x63, 0xd6,
            0x5e, 0x1d, 0x06, 0x4d, 0x78, 0xa3, 0xb8, 0x17, 0x57, 0x41, 0xc5, 0xbd, 0xf8, 0x36, 0xc9, 0x66, 0xb8, 0x8f,
            0x0b, 0xc7, 0xa9, 0x2d, 0xa7, 0x61, 0x2d, 0x3d, 0xa2, 0xa1, 0x84, 0x00,
        ];
        assert_eq!(cobs_decode_frame(input).unwrap(), Vec::from(output));
    }

    #[test]
    fn test_cobs_random2() {
        let output: &[u8] = &[
            0x03, 0x93, 0x2c, 0x02, 0x6a, 0x81, 0x71, 0x20, 0x5c, 0x6b, 0x60, 0x3a, 0xc1, 0x44, 0x5f, 0xdc, 0xe8, 0x02,
            0x1e, 0xf2, 0xdc, 0x24, 0x1d, 0x00, 0xc6, 0x3e, 0xc0, 0x10, 0xfe, 0xf2, 0xa8, 0xf3, 0x0e, 0xa2, 0xc2, 0xca,
            0x9d, 0x4f, 0x2b, 0x32, 0xb9, 0xb8, 0x73, 0xc6, 0x44, 0xb3, 0x87, 0x84, 0x3e, 0x2e, 0x2a, 0x53, 0x7a, 0xcd,
            0x68, 0x61, 0xc2, 0xa5, 0x45, 0x53, 0xf1, 0x6c, 0xed, 0x57, 0x74, 0xfe, 0x79, 0xce, 0x56, 0x4e, 0x9a, 0x8c,
            0x26, 0xa2, 0x0f, 0x7f, 0x19, 0x24, 0x03, 0xb7, 0xff, 0xa9, 0xdd, 0xcf, 0x75, 0x5b, 0x3d, 0xe1, 0xfe, 0x87,
            0xc9, 0x78, 0xcc, 0xd0, 0x08, 0x6f, 0x2d, 0xf7, 0x3d, 0x3a, 0x43, 0x42, 0x69, 0xbb, 0x0e, 0x94, 0x2c, 0x95,
            0xe8, 0xa6, 0x6a, 0x74, 0x42, 0xdf, 0x7e, 0x80, 0xf0, 0x10, 0x1c, 0x31, 0x73, 0x3e, 0x1b, 0xfb, 0xfb, 0x29,
            0xdf, 0xb9, 0x3c, 0x43, 0xac, 0x18, 0x2f, 0x2e, 0xba, 0xcc, 0x78, 0x34, 0xe2, 0x11, 0xd5, 0xda, 0x91, 0x62,
            0x3f, 0x8f, 0x11, 0xf7, 0x14, 0xf5, 0xdc, 0x78, 0xd9, 0xbe, 0xa6, 0x91, 0xe5, 0x8b, 0x4d, 0x4c, 0x2a, 0x82,
            0x45, 0xe8, 0x6e, 0x60, 0x28, 0x22, 0x53, 0x05, 0x19, 0x71, 0x22, 0x90, 0xe8, 0x5e, 0x69, 0x17, 0x53, 0x9c,
            0x72, 0x3b, 0xbd, 0xae, 0x27, 0xcd, 0xf4, 0x2e, 0x32, 0x2d, 0xcd, 0xd7, 0x2d, 0xa8, 0xc1, 0x21, 0x09, 0xbc,
            0xaa, 0x36, 0xc6, 0x2f, 0x27, 0x98, 0xf3, 0x08, 0xa2, 0x79, 0x55, 0x9a, 0x79, 0xd3, 0x15, 0x13, 0x21, 0x87,
            0xbd, 0x34, 0xb0, 0x17, 0x1a, 0x54, 0xdf, 0x32, 0x9e, 0xa9, 0x97, 0xff, 0xb1, 0x92, 0x9b, 0x6b, 0x08, 0x5e,
            0xe0, 0x2f, 0xf4, 0xcf, 0x95, 0x61, 0xdd, 0x64, 0xe0, 0xdc, 0xc4, 0xbc, 0x63, 0x10, 0xd3, 0xe2, 0xaf, 0x2b,
            0x49, 0xd8, 0x0b, 0x5c, 0xd5, 0xd8, 0x07, 0x39, 0x37, 0x1c, 0x8c, 0x2e, 0xec, 0x8a, 0xde, 0x24, 0x26, 0xf5,
            0x34, 0x1f, 0xab, 0x68, 0x3c, 0x20, 0xeb, 0x33, 0xaf, 0x5f, 0x9d, 0x74, 0x99, 0xad, 0xc1, 0xd9, 0x11, 0x43,
            0x19, 0x55, 0xd9, 0xfa, 0x99, 0xca, 0x68, 0xdb, 0xdc, 0x93, 0x8f, 0x4e, 0xc8, 0x74, 0xac, 0x76, 0x34, 0xcf,
            0xbc, 0x90, 0x7e, 0xbb, 0xd6, 0x07, 0x1c, 0x99, 0x0e, 0x7e, 0x29, 0x77, 0xd2, 0x2a, 0x75, 0xc3, 0xf9, 0x8c,
            0x03, 0x0f, 0x69, 0x13, 0x2a, 0x6d, 0x25, 0xf4, 0xd3, 0x26, 0x9e, 0x44, 0xdf, 0x50, 0xcf, 0x45, 0xd8, 0x50,
            0x3b, 0xc6, 0xa8, 0x0d, 0x65, 0x1b, 0xf9, 0xf4, 0x42, 0xf5, 0x0c, 0x72, 0x3f, 0x5e, 0xc9, 0xfa, 0x79, 0x84,
            0x4b, 0x4b, 0xd1, 0x85, 0x88, 0xf1, 0xda, 0x0d, 0x35, 0x8f, 0x80, 0xd6, 0x10, 0x35, 0x66, 0x42, 0x60, 0x5e,
            0x1d, 0x42, 0xd7, 0x32, 0x97, 0x1a, 0x94, 0xdc, 0xae, 0x42, 0x5d, 0x5b, 0xb1, 0x2b, 0x06, 0x05, 0xa0, 0x58,
            0xd4, 0xec, 0xa2, 0x54, 0x2a, 0xb0, 0xf8, 0xce, 0x56, 0x48, 0x55, 0xc0, 0x58, 0x9d, 0x77, 0x5e, 0x96, 0xe2,
            0x49, 0xd1, 0x87, 0x50, 0xdb, 0x70, 0x99, 0xbc, 0x46, 0x17, 0x74, 0xfd, 0x9a, 0x98, 0xd1, 0x17, 0x01, 0x84,
            0xe2, 0x7d, 0xe7, 0x3b, 0xcb, 0xdc, 0xc0, 0x28, 0xaf, 0x3c, 0x26, 0x19, 0x4b, 0xdc, 0x61, 0x95, 0x4c, 0x57,
            0x10, 0x61, 0x7e, 0xec, 0x51, 0x61, 0xcb, 0xe7, 0x84, 0x47, 0xbe, 0xa5, 0x04, 0x16, 0xe4, 0x33, 0xe4, 0x30,
            0x6c, 0xd4, 0xd1, 0x14, 0xa6, 0x41, 0x42, 0xfc, 0xf4, 0x66, 0xe3, 0xab, 0x02, 0x2d, 0xd4, 0x1c, 0x00, 0xb2,
            0x95, 0x88, 0xa2, 0x92, 0x5b, 0x0e, 0x41, 0xa9, 0x79, 0x11, 0xfe, 0xe2, 0xa2, 0xb3, 0xc5, 0x76, 0xd2, 0x1b,
            0x03, 0xe2, 0xe2, 0x2a, 0x9d, 0xf7, 0x35, 0x42, 0x03, 0xdf, 0xe3, 0x38, 0x29, 0x49, 0xfd, 0xcc, 0xf0, 0xdd,
            0x97, 0x77, 0xd8, 0x21, 0x7c, 0x79, 0xc0, 0x31,
        ];
        let input: &[u8] = &[
            0x18, 0x03, 0x93, 0x2c, 0x02, 0x6a, 0x81, 0x71, 0x20, 0x5c, 0x6b, 0x60, 0x3a, 0xc1, 0x44, 0x5f, 0xdc, 0xe8,
            0x02, 0x1e, 0xf2, 0xdc, 0x24, 0x1d, 0xff, 0xc6, 0x3e, 0xc0, 0x10, 0xfe, 0xf2, 0xa8, 0xf3, 0x0e, 0xa2, 0xc2,
            0xca, 0x9d, 0x4f, 0x2b, 0x32, 0xb9, 0xb8, 0x73, 0xc6, 0x44, 0xb3, 0x87, 0x84, 0x3e, 0x2e, 0x2a, 0x53, 0x7a,
            0xcd, 0x68, 0x61, 0xc2, 0xa5, 0x45, 0x53, 0xf1, 0x6c, 0xed, 0x57, 0x74, 0xfe, 0x79, 0xce, 0x56, 0x4e, 0x9a,
            0x8c, 0x26, 0xa2, 0x0f, 0x7f, 0x19, 0x24, 0x03, 0xb7, 0xff, 0xa9, 0xdd, 0xcf, 0x75, 0x5b, 0x3d, 0xe1, 0xfe,
            0x87, 0xc9, 0x78, 0xcc, 0xd0, 0x08, 0x6f, 0x2d, 0xf7, 0x3d, 0x3a, 0x43, 0x42, 0x69, 0xbb, 0x0e, 0x94, 0x2c,
            0x95, 0xe8, 0xa6, 0x6a, 0x74, 0x42, 0xdf, 0x7e, 0x80, 0xf0, 0x10, 0x1c, 0x31, 0x73, 0x3e, 0x1b, 0xfb, 0xfb,
            0x29, 0xdf, 0xb9, 0x3c, 0x43, 0xac, 0x18, 0x2f, 0x2e, 0xba, 0xcc, 0x78, 0x34, 0xe2, 0x11, 0xd5, 0xda, 0x91,
            0x62, 0x3f, 0x8f, 0x11, 0xf7, 0x14, 0xf5, 0xdc, 0x78, 0xd9, 0xbe, 0xa6, 0x91, 0xe5, 0x8b, 0x4d, 0x4c, 0x2a,
            0x82, 0x45, 0xe8, 0x6e, 0x60, 0x28, 0x22, 0x53, 0x05, 0x19, 0x71, 0x22, 0x90, 0xe8, 0x5e, 0x69, 0x17, 0x53,
            0x9c, 0x72, 0x3b, 0xbd, 0xae, 0x27, 0xcd, 0xf4, 0x2e, 0x32, 0x2d, 0xcd, 0xd7, 0x2d, 0xa8, 0xc1, 0x21, 0x09,
            0xbc, 0xaa, 0x36, 0xc6, 0x2f, 0x27, 0x98, 0xf3, 0x08, 0xa2, 0x79, 0x55, 0x9a, 0x79, 0xd3, 0x15, 0x13, 0x21,
            0x87, 0xbd, 0x34, 0xb0, 0x17, 0x1a, 0x54, 0xdf, 0x32, 0x9e, 0xa9, 0x97, 0xff, 0xb1, 0x92, 0x9b, 0x6b, 0x08,
            0x5e, 0xe0, 0x2f, 0xf4, 0xcf, 0x95, 0x61, 0xdd, 0x64, 0xe0, 0xdc, 0xc4, 0xbc, 0x63, 0x10, 0xd3, 0xe2, 0xaf,
            0x2b, 0x49, 0xd8, 0x0b, 0x5c, 0xd5, 0xd8, 0x07, 0x39, 0x37, 0x1c, 0x8c, 0x2e, 0xec, 0x8a, 0xde, 0x24, 0x26,
            0xf5, 0x34, 0x1f, 0xab, 0x68, 0x3c, 0x20, 0xeb, 0x33, 0xcf, 0xaf, 0x5f, 0x9d, 0x74, 0x99, 0xad, 0xc1, 0xd9,
            0x11, 0x43, 0x19, 0x55, 0xd9, 0xfa, 0x99, 0xca, 0x68, 0xdb, 0xdc, 0x93, 0x8f, 0x4e, 0xc8, 0x74, 0xac, 0x76,
            0x34, 0xcf, 0xbc, 0x90, 0x7e, 0xbb, 0xd6, 0x07, 0x1c, 0x99, 0x0e, 0x7e, 0x29, 0x77, 0xd2, 0x2a, 0x75, 0xc3,
            0xf9, 0x8c, 0x03, 0x0f, 0x69, 0x13, 0x2a, 0x6d, 0x25, 0xf4, 0xd3, 0x26, 0x9e, 0x44, 0xdf, 0x50, 0xcf, 0x45,
            0xd8, 0x50, 0x3b, 0xc6, 0xa8, 0x0d, 0x65, 0x1b, 0xf9, 0xf4, 0x42, 0xf5, 0x0c, 0x72, 0x3f, 0x5e, 0xc9, 0xfa,
            0x79, 0x84, 0x4b, 0x4b, 0xd1, 0x85, 0x88, 0xf1, 0xda, 0x0d, 0x35, 0x8f, 0x80, 0xd6, 0x10, 0x35, 0x66, 0x42,
            0x60, 0x5e, 0x1d, 0x42, 0xd7, 0x32, 0x97, 0x1a, 0x94, 0xdc, 0xae, 0x42, 0x5d, 0x5b, 0xb1, 0x2b, 0x06, 0x05,
            0xa0, 0x58, 0xd4, 0xec, 0xa2, 0x54, 0x2a, 0xb0, 0xf8, 0xce, 0x56, 0x48, 0x55, 0xc0, 0x58, 0x9d, 0x77, 0x5e,
            0x96, 0xe2, 0x49, 0xd1, 0x87, 0x50, 0xdb, 0x70, 0x99, 0xbc, 0x46, 0x17, 0x74, 0xfd, 0x9a, 0x98, 0xd1, 0x17,
            0x01, 0x84, 0xe2, 0x7d, 0xe7, 0x3b, 0xcb, 0xdc, 0xc0, 0x28, 0xaf, 0x3c, 0x26, 0x19, 0x4b, 0xdc, 0x61, 0x95,
            0x4c, 0x57, 0x10, 0x61, 0x7e, 0xec, 0x51, 0x61, 0xcb, 0xe7, 0x84, 0x47, 0xbe, 0xa5, 0x04, 0x16, 0xe4, 0x33,
            0xe4, 0x30, 0x6c, 0xd4, 0xd1, 0x14, 0xa6, 0x41, 0x42, 0xfc, 0xf4, 0x66, 0xe3, 0xab, 0x02, 0x2d, 0xd4, 0x1c,
            0x2e, 0xb2, 0x95, 0x88, 0xa2, 0x92, 0x5b, 0x0e, 0x41, 0xa9, 0x79, 0x11, 0xfe, 0xe2, 0xa2, 0xb3, 0xc5, 0x76,
            0xd2, 0x1b, 0x03, 0xe2, 0xe2, 0x2a, 0x9d, 0xf7, 0x35, 0x42, 0x03, 0xdf, 0xe3, 0x38, 0x29, 0x49, 0xfd, 0xcc,
            0xf0, 0xdd, 0x97, 0x77, 0xd8, 0x21, 0x7c, 0x79, 0xc0, 0x31, 0x00,
        ];
        assert_eq!(cobs_decode_frame(input).unwrap(), Vec::from(output));
    }
}
